version: '3.8'

services:
  # MLFlow Tracking Server
  mlflow:
    image: python:3.9-slim
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
              mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db"
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5000
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./portfolio-backend
      dockerfile: Dockerfile
    command: celery -A services.celery_service worker --loglevel=info
    volumes:
      - ./portfolio-backend:/app
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENVIRONMENT=production
    depends_on:
      - redis
      - mlflow
    networks:
      - portfolio-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./portfolio-backend
      dockerfile: Dockerfile
    command: celery -A services.celery_service beat --loglevel=info
    volumes:
      - ./portfolio-backend:/app
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENVIRONMENT=production
    depends_on:
      - redis
      - mlflow
    networks:
      - portfolio-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./portfolio-backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./portfolio-backend:/app
    environment:
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - mlflow
    networks:
      - portfolio-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Frontend
  frontend:
    build:
      context: ./portfolio-app
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./portfolio-app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    networks:
      - portfolio-network
    restart: unless-stopped

  # Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - portfolio-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - portfolio-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - portfolio-network
    restart: unless-stopped

volumes:
  mlflow_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  portfolio-network:
    driver: bridge 